using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace JavaTranslate.Parsing;

public interface IOpcode {
    public Operation Operation { get; }
    public int Offset { get; }
}

public record OpcodeSimple(Operation Operation, int Offset) : IOpcode;

public record OpcodeBranch(Operation Operation, int Offset, int Location) : IOpcode;

public record OpcodeValueExtra(Operation Operation, int Offset, short Value, byte ExtraValue) : IOpcode;

public record OpcodeOneValue(Operation Operation, int Offset, short Value) : IOpcode;

public record OpcodeTwoValue(Operation Operation, int Offset, short FirstValue, short SecondValue) : IOpcode;

public record OpcodeTable(Operation Operation, int Offset, byte[] JumpTable) : IOpcode;

[JsonConverter(typeof(StringEnumConverter))]
public enum Operation : byte {
    Nop,
    RefConstNull,
    IntConstM1,
    IntConst0,
    IntConst1,
    IntConst2,
    IntConst3,
    IntConst4,
    IntConst5,
    LongConst0,
    LongConst1,
    FloatConst0,
    FloatConst1,
    FloatConst2,
    DoubleConst0,
    DoubleConst1,
    BytePush,
    ShortPush,
    LoadConst,
    LoadConstWide,
    LoadConst2Wide,
    IntLoad,
    LongLoad,
    FloatLoad,
    DoubleLoad,
    RefLoad,
    IntLoadVar0,
    IntLoadVar1,
    IntLoadVar2,
    IntLoadVar3,
    LongLoadVar0,
    LongLoadVar1,
    LongLoadVar2,
    LongLoadVar3,
    FloatLoadVar0,
    FloatLoadVar1,
    FloatLoadVar2,
    FloatLoadVar3,
    DoubleLoadVar0,
    DoubleLoadVar1,
    DoubleLoadVar2,
    DoubleLoadVar3,
    RefLoadVar0,
    RefLoadVar1,
    RefLoadVar2,
    RefLoadVar3,
    IntArrayLoad,
    LongArrayLoad,
    FloatArrayLoad,
    DoubleArrayLoad,
    RefArrayLoad,
    ByteArrayLoad,
    CharArrayLoad,
    ShortArrayLoad,
    IntStore,
    LongStore,
    FloatStore,
    DoubleStore,
    RefStore,
    IntStoreVar0,
    IntStoreVar1,
    IntStoreVar2,
    IntStoreVar3,
    LongStoreVar0,
    LongStoreVar1,
    LongStoreVar2,
    LongStoreVar3,
    FloatStoreVar0,
    FloatStoreVar1,
    FloatStoreVar2,
    FloatStoreVar3,
    DoubleStoreVar0,
    DoubleStoreVar1,
    DoubleStoreVar2,
    DoubleStoreVar3,
    RefStoreVar0,
    RefStoreVar1,
    RefStoreVar2,
    RefStoreVar3,
    IntArrayStore,
    LongArrayStore,
    FloatArrayStore,
    DoubleArrayStore,
    RefArrayStore,
    ByteArrayStore,
    CharArrayStore,
    ShortArrayStore,
    Pop,
    Pop2,
    Dup,
    DupX1,
    DupX2,
    Dup2,
    Dup2X1,
    Dup2X2,
    Swap,
    IntAdd,
    LongAdd,
    FloatAdd,
    DoubleAdd,
    IntSub,
    LongSub,
    FloatSub,
    DoubleSub,
    IntMul,
    LongMul,
    FloatMul,
    DoubleMul,
    IntDiv,
    LongDiv,
    FloatDiv,
    DoubleDiv,
    IntRem,
    LongRem,
    FloatRem,
    DoubleRem,
    IntNeg,
    LongNeg,
    FloatNeg,
    DoubleNeg,
    IntShl,
    LongShl,
    IntShr,
    LongShr,
    IntUShr,
    LongUShr,
    IntAnd,
    LongAnd,
    IntOr,
    LongOr,
    IntXor,
    LongXor,
    IntIncrement,
    IntToLong,
    IntToFloat,
    IntToDouble,
    LongToInt,
    LongToFloat,
    LongToDouble,
    FloatToInt,
    FloatToLong,
    FloatToDouble,
    DoubleToInt,
    DoubleToLong,
    DoubleToFloat,
    IntToByte,
    IntToChar,
    IntToShort,
    LongCmp,
    FloatCmpLess,
    FloatCmpGreater,
    DoubleCmpLess,
    DoubleCmpGreater,
    IfEq,
    IfNe,
    IfLt,
    IfGe,
    IfGt,
    IfLe,
    IfIntCmpEq,
    IfIntCmpNe,
    IfIntCmpLt,
    IfIntCmpGe,
    IfIntCmpGt,
    IfIntCmpLe,
    IfRefCmpEq,
    IfRefCmpNe,
    Goto,
    Jsr, // deprecated
    Ret, // deprecated
    TableSwitch,
    LookupSwitch,
    IntReturn,
    LongReturn,
    FloatReturn,
    DoubleReturn,
    RefReturn,
    Return,
    GetStatic,
    PutStatic,
    GetField,
    PutField,
    InvokeVirtual,
    InvokeSpecial,
    InvokeStatic,
    InvokeInterface,
    InvokeDynamic,
    New,
    NewArray,
    NewRefArray,
    ArrayLength,
    Throw,
    CheckedCast,
    InstanceOf,
    MonitorEnter,
    MonitorExit,
    Wide,
    MultiNewRefArray,
    IfNull,
    IfNotNull,
    GotoWide,
    JsrWide, // deprecated
    Breakpoint,
    #region Unused
    NoName1,
    NoName2,
    NoName3,
    NoName4,
    NoName5,
    NoName6,
    NoName7,
    NoName8,
    NoName9,
    NoName10,
    NoName11,
    NoName12,
    NoName13,
    NoName14,
    NoName15,
    NoName16,
    NoName17,
    NoName18,
    NoName19,
    NoName20,
    NoName21,
    NoName22,
    NoName23,
    NoName24,
    NoName25,
    NoName26,
    NoName27,
    NoName28,
    NoName29,
    NoName30,
    NoName31,
    NoName32,
    NoName33,
    NoName34,
    NoName35,
    NoName36,
    NoName37,
    NoName38,
    NoName39,
    NoName40,
    NoName41,
    NoName42,
    NoName43,
    NoName44,
    NoName45,
    NoName46,
    NoName47,
    NoName48,
    NoName49,
    NoName50,
    ImplementationDefined1,
    ImplementationDefined2
    #endregion
}